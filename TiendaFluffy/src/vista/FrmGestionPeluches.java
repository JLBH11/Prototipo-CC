
package vista;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Peluche;
import modelo.Tienda;

public class FrmGestionPeluches extends javax.swing.JFrame {

    private Tienda tienda;
    private FrmAdmin ventanaAdmin;
private FrmReportes ventanaReportes;

public void setVentanaAdmin(FrmAdmin admin) {
    this.ventanaAdmin = admin;
    System.out.println("‚úÖ ventanaAdmin asignada: " + admin);
}

public void setVentanaReportes(FrmReportes reportes) {
    this.ventanaReportes = reportes;
    System.out.println("‚úÖ ventanaReportes asignada: " + reportes);
}



    /**
     * Creates new form FrmGestionPeluches
     */
    public FrmGestionPeluches(Tienda tienda) {
        this.tienda = tienda;
    initComponents();
    System.out.println("Peluches cargados: " + tienda.getCatalogo().size());
cargarPeluchesEnTabla();
    actualizarTablaPeluches();
    addWindowListener(new WindowAdapter() {
    @Override
    public void windowClosing(WindowEvent e) {
        try {
            tienda.guardarCatalogo();
            System.out.println("Cat√°logo guardado al cerrar ventana.");
        } catch (IOException ex) {
            System.err.println("Error al guardar cat√°logo al cerrar ventana: " + ex.getMessage());
        }
    }
});
getContentPane().setBackground(new Color(250, 218, 221));
}
    
    




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeluches = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnNuevoPeluche = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnGuardarStock = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblPeluches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Precio", "Categoria", "Clasificacion", "Stock"
            }
        ));
        jScrollPane1.setViewportView(tblPeluches);

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnNuevoPeluche.setText("AGREGAR");
        btnNuevoPeluche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoPelucheActionPerformed(evt);
            }
        });

        jButton1.setText("VOLVER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnGuardarStock.setText("GUARDAR CAMBIOS STOCK");
        btnGuardarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarStockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(btnNuevoPeluche, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                .addComponent(btnGuardarStock)
                .addGap(97, 97, 97))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevoPeluche, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardarStock, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

    int fila = tblPeluches.getSelectedRow();
    if (fila >= 0) {
        tienda.getCatalogo().remove(fila);
        cargarTabla();
        try {
            tienda.guardarCatalogo();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al guardar: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un peluche para eliminar.");
    }


        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnNuevoPelucheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoPelucheActionPerformed
FrmNuevoPeluche frmNuevo = new FrmNuevoPeluche(tienda, this);
frmNuevo.setVisible(true);




        // TODO add your handling code here:
    }//GEN-LAST:event_btnNuevoPelucheActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    FrmAdmin admin = new FrmAdmin(tienda);  // ‚Üê Aseg√∫rate de tener la instancia de Tienda
    admin.setVisible(true);
    this.dispose(); // Cierra la ventana actual


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnGuardarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarStockActionPerformed
DefaultTableModel modelo = (DefaultTableModel) tblPeluches.getModel();

// Actualizar el stock de los peluches en el cat√°logo
for (int i = 0; i < modelo.getRowCount(); i++) {
    String nombre = modelo.getValueAt(i, 0).toString();
    int nuevoStock;

    try {
        nuevoStock = Integer.parseInt(modelo.getValueAt(i, 4).toString());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Stock inv√°lido en la fila " + (i + 1));
        return;
    }

    // Buscar y actualizar el peluche
    for (Peluche p : tienda.getCatalogo()) {
        if (p.getNombre().equalsIgnoreCase(nombre)) {
            p.setStock(nuevoStock);
            break;
        }
    }
}

// Guardar el cat√°logo actualizado
try {
    tienda.guardarCatalogo();
    System.out.println("üü¢ Cat√°logo guardado:");
    for (Peluche p : tienda.getCatalogo()) {
        System.out.println(" - " + p.getNombre() + ", stock: " + p.getStock());
    }
    JOptionPane.showMessageDialog(this, "Stock actualizado correctamente.");
} catch (IOException ex) {
    JOptionPane.showMessageDialog(this, "‚ùå Error al guardar el cat√°logo: " + ex.getMessage());
}
System.out.println("Instancia Tienda: " + tienda);
if (ventanaAdmin != null) {
    ventanaAdmin.actualizarResumen();
} else {
    System.out.println("‚ùå ventanaAdmin es null");
}

if (ventanaReportes != null) {
    ventanaReportes.cargarDatos();
} else {
    System.out.println("‚ùå ventanaReportes es null");
}
if (ventanaAdmin != null) {
    ventanaAdmin.actualizarResumen(); // ‚úÖ actualiza el resumen
}

if (ventanaReportes != null) {
    ventanaReportes.actualizarDatos(); // Refresca los reportes
}











        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarStockActionPerformed

   public void actualizarTablaPeluches() {
    DefaultTableModel model = (DefaultTableModel) tblPeluches.getModel();
    model.setRowCount(0); // Limpia la tabla

    for (Peluche p : tienda.getCatalogo()) {
        System.out.println("Agregando peluche: " + p.getNombre()); // Opcional para debug
        model.addRow(new Object[]{
            p.getNombre(),
            p.getPrecio(),
            p.getCategoria(),
            p.getCalificacion(),
            p.getStock()  // üëà A√±adir stock
        });
    }
}



private void cargarPeluchesEnTabla() {
    try {
        tienda.cargarCatalogo(); // ‚úÖ Cargar desde archivo
    } catch (IOException | ClassNotFoundException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar cat√°logo: " + e.getMessage());
        return;
    }

    DefaultTableModel modelo = (DefaultTableModel) tblPeluches.getModel();
    modelo.setRowCount(0); // Limpiar la tabla antes de cargar

    for (Peluche p : tienda.getCatalogo()) {
        modelo.addRow(new Object[]{
            p.getNombre(),
            p.getPrecio(),
            p.getCategoria(),
            p.getCalificacion(),
            p.getStock()  // üëà Mostrar stock
        });
    }
}

private void cargarTabla() {
    DefaultTableModel modelo = new DefaultTableModel(
        new Object[]{"Nombre", "Precio", "Categor√≠a", "Calificaci√≥n", "Stock"}, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            // Solo permitir editar el stock (columna 4)
            return column == 4;
        }
    };

    for (Peluche p : tienda.getCatalogo()) {
        modelo.addRow(new Object[]{
            p.getNombre(),
            p.getPrecio(),
            p.getCategoria(),
            p.getCalificacion(),
            p.getStock()
        });
    }

    tblPeluches.setModel(modelo);
}
private void guardarCambiosStock() {
    DefaultTableModel modelo = (DefaultTableModel) tblPeluches.getModel();

    for (int i = 0; i < modelo.getRowCount(); i++) {
        String nombre = modelo.getValueAt(i, 0).toString();
        int nuevoStock;
        try {
            nuevoStock = Integer.parseInt(modelo.getValueAt(i, 4).toString());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Stock inv√°lido en fila " + (i + 1));
            return;
        }

        for (Peluche p : tienda.getCatalogo()) {
            if (p.getNombre().equals(nombre)) {
                p.setStock(nuevoStock);
                break;
            }
        }
    }

    try {
        tienda.guardarCatalogo(); // ‚úÖ GUARDAR CAT√ÅLOGO EN ARCHIVO
        System.out.println("‚úÖ Cat√°logo guardado:");
        for (Peluche p : tienda.getCatalogo()) {
            System.out.println(" - " + p.getNombre() + ", stock: " + p.getStock());
        }
        JOptionPane.showMessageDialog(this, "Stock actualizado correctamente.");
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "‚ùå Error al guardar cat√°logo: " + ex.getMessage());
    }
}







    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardarStock;
    private javax.swing.JButton btnNuevoPeluche;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPeluches;
    // End of variables declaration//GEN-END:variables
}
